# vim: ft=zsh

build_react_component() {
  component_name=$1
  target_path=$2

  component_path="$target_path/$component_name"

  mkdir -p $component_path

  cp $DOTHOME/templates/index.tsx "$component_path/index.tsx"
  cp $DOTHOME/templates/Component.tsx "$component_path/$component_name.tsx"
  cp $DOTHOME/templates/Component.spec.tsx "$component_path/$component_name.spec.tsx"

  replace Component $component_name $component_path
}

c() {
  cd "$HOME/code/$1"
}
compctl -/ -S '' -W "$HOME/code" c

drill_passwords() {
  echo "laptop password"
  sudo echo "correct"

  echo "team artsy password"
  eval $(op signin team_artsy)
  [ "Artsy" == "$(op get account | jq .name | tr -d \")" ] && echo "correct"
  op signout --account team_artsy

  echo "team allured password"
  eval $(op signin team_allured)
  [ "team-allured" == "$(op get account | jq .name | tr -d \")" ] && echo "correct"
  op signout --account team_allured
}

get_k8s_token() {
  aws-iam-authenticator token --cluster-id $K8S_CLUSTER_ID --role $K8S_ROLE --token-only
}

github_compare() {
  current_branch=$(git branch --show-current)

  if [ "$current_branch" == "master" ]; then
    echo "must be on feature branch"
    return 1
  fi

  hub compare jonallured:$current_branch
}

nuke_modules() {
  allow_list="jay|convection|forty-web|volt"
  node_modules=$(find $HOME/code -name node_modules -type d -maxdepth 3 | egrep -v $allow_list)
  printf '%s\n' "${node_modules[@]}"
  total=$(echo $node_modules | xargs du -s -c -h | tail -n 1 | cut -f 1)
  echo $node_modules | xargs rm -rf
  echo "$total cleaned up"
}

ddd() {
  bundle exec rspec --dry-run --order defined --format documentation $1
}

fetchup() {
  current_branch=$(git branch --show-current)

  if [ "$current_branch" != "main" ]; then
    echo "must be on main branch"
    return 1
  fi

  git fetch --all --quiet

  if git remote | grep upstream; then
    git reset --hard upstream/main
    git push origin main --no-verify
  else
    git pull --rebase
  fi
}

fido() {
  if ! $(tmux has-session -t mutt &>/dev/null); then
    cd ~
    tmux new-session -d -s mutt
    tmux source-file $DOTHOME/tmux/mutt.conf
  fi

  tmux attach-session -t mutt
}

l.() {
  ls -ld "${1:-$PWD}"/.[^.]*
}

mux() {
  if [ -n "$TMUX" ]; then
    echo "ERROR: You're already in a tmux session. Nesting tmux sessions is a bad idea."
  fi

  name="$(basename $PWD | sed -e 's/\./-/g')"

  if ! $(tmux has-session -t $name &>/dev/null); then
    tmux new-session -d -s $name

    conf=$DOTHOME/tmux/$name.mux
    if [ -f $conf ]; then
      tmux source-file $conf
    else
      tmux source-file $DOTHOME/tmux/default.mux
    fi
  fi

  tmux attach-session -t $name
}

open_rails_console() {
  if [ -e hokusai/$1.yml ]; then
    echo "hokusai $1 run 'bundle exec rails c -- --nomultiline' --tty"
    hokusai $1 run 'bundle exec rails c -- --nomultiline' --tty --env MONGODB_SOCKET_TIMEOUT=300
  elif git config remote.$1.url > /dev/null; then
    echo "heroku run console -r $1"
    heroku run console -r $1
  else
    echo "Can't open console for $1."
  fi
}

replace() {
  target="$1"
  shift
  replacement="$1"
  shift

  ag -l --nocolor "$target" "$@" | xargs sed -i '' "s/$target/$replacement/g"
}

replug() {
  cd $DOTHOME

  replug_log="replug.log"

  rm -f $replug_log

  echo '+ PlugClean' >> $replug_log
  vim -c ':PlugClean | :%y* | qa'
  pbpaste >> $replug_log

  echo '+ PlugInstall' >> $replug_log
  vim -c ':PlugInstall | :%y* | qa'
  pbpaste >> $replug_log

  echo '+ PlugUpdate' >> $replug_log
  vim -c ':PlugUpdate | :%y* | qa'
  pbpaste >> $replug_log

  echo '+ PlugDiff' >> $replug_log
  vim -c ':PlugDiff | :%y* | qa'
  pbpaste >> $replug_log

  echo '+ PlugUpgrade' >> $replug_log
  vim -c ':PlugUpgrade | qa'
  git diff rcm/vim/autoload/plug.vim >> $replug_log

  echo '+ replug done' >> $replug_log
  cd - > /dev/null
}

twiki() {
  bundle exec rake db:migrate && bundle exec rake db:migrate:redo && bundle exec rake db:test:prepare
}

sharp() {
  sharpen_log="$DOTHOME/sharpen.log"
  $DOTHOME/sharpen-script &> $sharpen_log
  echo '+ nuke_modules' >> $sharpen_log
  nuke_modules >> $sharpen_log
  replug
  jay done
}

update_artsy_repos() {
  cd ~/code/github_scripts
  ruby artsy_repos.rb > ~/code/team-artsy-workflow-data/data/repos.yml
  cd ~/code/team-artsy-workflow-data
  git status
}
