# vim: ft=zsh

c() {
  cd "$HOME/code/$1"
}
compctl -/ -S '' -W "$HOME/code" c

github_compare() {
  current_branch=$(git symbolic-ref --quiet --short HEAD)

  if [ "$current_branch" == "master" ]; then
    echo "must be on feature branch"
    return 1
  fi

  hub compare jonallured:$current_branch
}

nuke_modules() {
  node_modules=$(find $HOME/code -name node_modules -type d ! -path "*jay*" ! -path "*volt*" -maxdepth 3)
  printf '%s\n' "${node_modules[@]}"
  total=$(echo $node_modules | xargs du -s -c -h | tail -n 1 | cut -f 1)
  echo $node_modules | xargs rm -rf
  echo "$total cleaned up"
}

ddd() {
  rspec --dry-run --order defined --format documentation $1
}

fetchup() {
  current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$current_branch" != "master" ]; then
    echo "must be on master branch"
    return 1
  fi

  git fetch --all --quiet

  if git remote | grep upstream; then
    git reset --hard upstream/master
    git push origin master --no-verify
  else
    git pull --rebase
  fi
}

fido() {
  if ! $(tmux has-session -t mutt &>/dev/null); then
    cd ~
    tmux new-session -d -s mutt
    tmux source-file ~/code/dotfiles/tmux/mutt.conf
  fi

  tmux attach-session -t mutt
}

l.() {
  ls -ld "${1:-$PWD}"/.[^.]*
}

mux() {
  if [ -n "$TMUX" ]; then
    echo "ERROR: You're already in a tmux session. Nesting tmux sessions is a bad idea."
  fi

  name="$(basename $PWD | sed -e 's/\./-/g')"

  if ! $(tmux has-session -t $name &>/dev/null); then
    tmux new-session -d -s $name

    conf=$HOME/code/dotfiles/tmux/$name.mux
    if [ -f $conf ]; then
      tmux source-file $conf
    else
      tmux source-file $HOME/code/dotfiles/tmux/default.mux
    fi
  fi

  tmux attach-session -t $name
}

open_rails_console() {
  if [ -e hokusai/$1.yml ]; then
    echo "hokusai $1 run 'bundle exec rails c' --tty"
    hokusai $1 run 'bundle exec rails c' --tty
  elif git config remote.$1.url > /dev/null; then
    echo "heroku run console -r $1"
    heroku run console -r $1
  else
    echo "Can't open console for $1."
  fi
}

replace() {
  target="$1"
  shift
  replacement="$1"
  shift

  ag -l --nocolor "$target" "$@" | xargs sed -i '' "s/$target/$replacement/g"
}

twiki() {
  rake db:migrate && rake db:migrate:redo && rake db:test:prepare
}
